"map <space> <Nop>
let mapleader = " "

set number
set relativenumber
set ignorecase
set smartcase
set scrolloff=5

Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = "175"
let g:highlightedyank_highlight_color = "rgba(255, 209, 26, 100)"


Plug 'tpope/vim-commentary'
set commentary  " use gc to comment/uncomment lines

Plug 'tpope/vim-surround'
set surround  " use cs({ to change surrounding brackets, ds( to delete surrounding brackets

Plug 'easymotion/vim-easymotion'
let g:EasyMotion_do_mappings=0
set easymotion
nmap <space><space> <Plug>(easymotion-s2)

Plug 'preservim/nerdtree'
map <leader>e :NERDTree<CR>
map <leader>fe :NERDTree<CR>

" use system clipboard for vim yank/paste
set clipboard+=unnamedplus
set clipboard+=ideaput

set hlsearch
set incsearch
" clear search highlight
nnoremap <esc> :noh<cr><esc>

" restore visual selection after indent change
vnoremap < <gv
vnoremap > >gv

" don't replace clipboard on override paste
vnoremap p \"_dP

" yank without whitespace and return to original position, also delete marks
" note: the mark is called y and I'm also using y to yank, so this is a bit confusing
"nnoremap yy my^yg_`y:delmarks y<cr>

" center various next/previous searches on screen
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap * *zzzv
nnoremap # #zzzv

" add undo breakpoints on certain keys
"inoremap . .<c-g>u
"inoremap , ,<c-g>u
"inoremap ; ;<c-g>u



" move to beginning/end of line with text (instead of 0/$, which include whitespace)
nnoremap <s-h> ^
onoremap <s-h> ^
xnoremap <s-h> ^
nnoremap <s-l> g_
onoremap <s-l> g_
xnoremap <s-l> g_

" window navigation
nnoremap <a-h> <c-w>h
nnoremap <a-l> <c-w>l
nnoremap <a-j> <c-w>j
nnoremap <a-k> <c-w>k



set which-key
set notimeout
let g:WhichKey_ShowVimActions = "true"

" let g:which_key_map = {}
" let g:which_key_map['c'] = {
"     \'name': '+code',
"     \'r': ['Rename', 'RenameElement'],
"     \'s': ['Structure', 'FileStructurePopup'],
"     \'f': ['Find', 'FindInPath'],
"     \'a': ['Analyze', 'AnalyzeDataflow'],
"     \'i': ['Implement', 'ImplementMethods'],
"     \'t': ['Test', 'RunAllTestsInClass'],
"     \'d': ['Debug', 'Debug'],
"     \'c': ['Coverage', 'ToggleCoverage'],
"     \'m': ['Move', 'Move'],
"     \'o': ['Optimize', 'OptimizeImports'],
"     \'p': ['Parameter', 'ChangeSignature'],
"     \'v': ['VCS', 'Vcs.QuickListPopupAction'],
"     \'u': ['Usage', 'FindUsages'],
"     \'e': ['Edit', 'EditSource'],
"     \'n': ['Navigate', 'Navigate'],
"     \'h': ['Hierarchy', 'TypeHierarchy'],
"     \'l': ['Live', 'LiveTemplates'],
" }
"
" call which_key#register('<Space>', "g:which_key_map")

map <c-z> <Action>(ToggleDistractionFreeMode)

" map / <Action>(Find)  " doesn't stop search on enter, so sticking with vim search
map <leader>/ <Action>(FindInPath)

let g:WhichKeyDesc_Files = "<leader>f   +files"
map <leader>fce :e ~/.config/ideavim/ideavimrc<CR>

map <leader>fs <Action>(SaveAll)
map <leader>ff <Action>(GotoFile)
map <leader>fn <Action>(NewElement)
map <leader>fr <Action>(RecentFiles)  " NOTE: remove backspace/delete mappings from ide keymaps on DELETE actions
map <leader>fd <Action>(CloseActiveTab)

let g:WhichKeyDesc_Code = "<leader>c   +code"
map <leader>cc <Action>(ShowIntentionActions)
map <leader>ca <Action>(Refactorings.QuickListPopupAction)
map <leader>cr <Action>(RenameElement)
map <leader>cs <Action>(FileStructurePopup)


let g:WhichKeyDesc_Run = "<leader>r   +run"
map <leader>rr <Action>(ChooseRunConfiguration) " also <alt+ctrl+r>
map <leader>rx <Action>(Stop) " also <alt+ctrl+x>
map <leader>rd <Action>(ChooseDebugConfiguration) " also <alt+ctrl+d>




set ideajoin  " smarter line joins, e.g. combines nested ifs into && conditions - https://github.com/JetBrains/ideavim/blob/master/doc/ideajoin-examples.md
set ideamarks " marks are persistent between intellij and ideavim


map ]e <Action>(GotoNextError)
map [e <Action>(GotoPreviousError)

"
" let g:WhichKey_ShowVimActions = "true"
" let g:WhichKey_DefaultDelay = 0
"
"
"
" set NERDTree
" map <C-p> :NERDTree<CR>
" let g:NERDTreeMapActivateNode='l'
" let g:NERDTreeMapJumpParent='h'
"
" nmap <leader>gg     <action>(Git.Menu)
" nmap <leader>t      <action>(ActivateTerminalToolWindow)
" nmap <leader>cr     <action>(RenameElement)
" nmap <leader>cs     <action>(FileStructurePopup)
" nmap <leader>/      <action>(FindInPath)
" nmap <leader>e      <action>(ActivateProjectToolWindow)
"
"
"
